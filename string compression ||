class Solution {
private:
    vector<vector<int>>x;
    int func(int index, int k, string &s){
        int n = s.length();
        if(n - index <= k) return 0;
        if(x[index][k]!=-1) return x[index][k];
        int ans = k ? func(index+1, k-1, s) : 1e5;
        int cnt = 1, removeCnt = 0;
        for(int i = index+1; i <= n; i++){
            int cur = 1 + ((cnt>99) ? 3 : (cnt>9) ? 2 : (cnt>1) ? 1 : 0) + func(i, k - removeCnt, s);
            ans = min(ans, cur);
            if(i<n && s[i] == s[index]) cnt++;
            else if(k - removeCnt <= 0) break;
            else removeCnt++;
        }
        return x[index][k] = ans;
    }
public:
    int getLengthOfOptimalCompression(string s, int k) {
        x.resize(101, vector<int>(101, -1));
        return func(0, k, s);
    }
};
